<?php namespace DBDiff;

use Illuminate\View\Compilers\BladeCompiler;
use Illuminate\Filesystem\Filesystem;
use Symfony\Component\Yaml\Yaml;

class Templater {

    function __construct($params, $up, $down) {
        $this->params = $params;
        $this->up = $up;
        $this->down = $down;
    }

    public function output() {
        $comments = $this->getComments();
        $content  = $this->getContent();
        if (is_null($this->params->output)) {
            $tokens = pathinfo($this->params->config);

            $last_file = end(glob(getcwd() . "/migrations/*_" . $tokens['filename'] . ".migration"));
            if (!empty($last_file) && is_readable($last_file)) {
                $last_content = file_get_contents($last_file);
                $last_content = preg_replace('~\#.*\n~', '', $last_content);
                $last_content = trim($last_content);
                $content_compare = trim($content);
                if ($content_compare === $last_content || similar_text($content_compare, $last_content) === strlen($last_content)) {
                    Logger::info("Migration content already exists on {$last_file}");
                    return false;
                }
            }

            $output_filename = getcwd() . "/migrations/" . date("YmdHis", time()) . "_" . $tokens['filename'] . ".migration";

            Logger::info("Writing migration file to {$output_filename}");
            file_put_contents($output_filename, $comments . $content);
        } else {
            Logger::info("Writing migration file to ".$this->params->output);
            return file_put_contents($this->params->output, $comments . $content);
        }
    }

    private function getComments() {
        if (!$this->params->nocomments) {
            $prefix = "\n#    ";
            $config = join($prefix, explode("\n", Yaml::dump((array) $this->params)));
            return "# Generated by DBDiff\n# On ".date('m/d/Y h:i:s a', time())."\n".
                   "#Â Config:" . $prefix . $config . "\n\n";
        }
        return "";
    }

    private function getContent() {
        $compiler = new BladeCompiler(new Filesystem, ".");
        $template = $this->getTemplate();
        $compiled = $compiler->compileString(' ?>'.$template);
        $up = trim($this->up, "\n");
        $down = trim($this->down, "\n");
        ob_start();
        eval($compiled);
        $content = ob_get_contents();
        ob_end_clean();
        return $content;
    }

    private function getTemplate() {
        if (file_exists($this->params->template))
            return file_get_contents($this->params->template);
        return "#---------- UP ----------\n{{\$up}}\n#---------- DOWN ----------\n{{\$down}}";
    }
}
